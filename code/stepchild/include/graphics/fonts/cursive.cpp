/*
 At some point, this (and all the font functions) should just read out bytes from spritemaps.
 Maybe consider making them GFX glyphs? So you can integrate it w/ the adafruit libraries.
 (don't reinvent the wheel!)
 */
// 'cursive_fontsheet', 60x84px
//const unsigned char cursive_fontsheet [] = {
//	0x00, 0x40, 0x01, 0x00, 0x60, 0x08, 0x00, 0x40, 0x00, 0x40, 0x01, 0x10, 0x50, 0x08, 0x04, 0x00, 
//	0x18, 0x82, 0x02, 0x28, 0x91, 0x90, 0x00, 0x40, 0x28, 0xa4, 0x0e, 0x30, 0xa2, 0x98, 0x10, 0xc0, 
//	0x49, 0x34, 0x9a, 0x65, 0x46, 0xb5, 0x31, 0x50, 0xb6, 0xcb, 0x6d, 0x9b, 0xfb, 0xd6, 0xce, 0x60, 
//	0x00, 0x00, 0x00, 0x01, 0x80, 0x80, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x01, 0x40, 
//	0x00, 0x00, 0x00, 0x01, 0x42, 0x80, 0x01, 0x40, 0x00, 0x00, 0x00, 0x01, 0x25, 0x00, 0x02, 0x40, 
//	0x00, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x01, 0x00, 
//	0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x20, 0x00, 0x00, 0x61, 0x80, 0x09, 0xc0, 
//	0x28, 0x62, 0x84, 0x30, 0x52, 0x8e, 0x18, 0x70, 0x30, 0x45, 0x4a, 0x48, 0x94, 0x92, 0x28, 0xc0, 
//	0x70, 0xcd, 0x5a, 0xc8, 0xe5, 0x14, 0x49, 0x80, 0xaf, 0x35, 0x6b, 0x37, 0x9b, 0x63, 0xb6, 0x70, 
//	0x00, 0x00, 0x00, 0x01, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x80, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x01, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x80, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x38, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc9, 0x45, 0x10, 
//	0x24, 0x94, 0x12, 0x20, 0xe0, 0x81, 0x0a, 0x20, 0x24, 0x99, 0x4c, 0x69, 0x20, 0x82, 0x1f, 0xf0, 
//	0x6d, 0x5a, 0x4d, 0xaa, 0x41, 0x0c, 0x88, 0x40, 0x9a, 0x25, 0xb2, 0x9c, 0x37, 0x9f, 0x70, 0x80, 
//	0x00, 0x00, 0x00, 0x08, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa0, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x29, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x40, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x50, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 
//	0x3c, 0x7c, 0x4f, 0x3c, 0x61, 0x02, 0x18, 0x00, 0x40, 0x83, 0x91, 0x44, 0x91, 0x06, 0x04, 0x00, 
//	0x71, 0xc0, 0x9f, 0x39, 0x12, 0x04, 0x04, 0x00, 0x0a, 0x21, 0x22, 0x09, 0x10, 0x0c, 0x18, 0x00, 
//	0x8a, 0x22, 0x22, 0x11, 0x20, 0x00, 0x20, 0x00, 0x71, 0xc2, 0x3c, 0x60, 0xc0, 0x10, 0x80, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};


//Cursive font
void printCursive(int x, int y, String text, uint16_t c){
  for(uint16_t letter = 0; letter<text.length(); letter++){
    char character = text.charAt(letter);
    switch(character){
      case ' ':
        continue;
      case 'a':
        display.drawBitmap(x+6*letter,y,cursive_font[0],6,6,c);
        break;
      case 'b':
        display.drawBitmap(x+6*letter,y,cursive_font[1],6,8,c);
        break;
      case 'c':
        display.drawBitmap(x+6*letter,y,cursive_font[2],6,6,c);
        break;
      case 'd':
        display.drawBitmap(x+6*letter,y,cursive_font[3],6,6,c);
        break;
      case 'e':
        display.drawBitmap(x+6*letter,y,cursive_font[4],6,6,c);
        break;
      case 'f':
        // display.drawBitmap(x+6*letter,y,cursive_font[5],6,6,c);
        display.drawBitmap(x+6*letter,y,cursive_font[5],6,12,c);
        break;
      case 'g':
        display.drawBitmap(x+6*letter,y,cursive_font[6],6,12,c);
        break;
      case 'h':
        display.drawBitmap(x+6*letter,y,cursive_font[7],6,6,c);
        break;
      case 'i':
        display.drawBitmap(x+6*letter,y,cursive_font[8],6,6,c);
        break;
      case 'j':
        display.drawBitmap(x+6*letter,y,cursive_font[9],6,12,c);
        break;
      case 'k':
        display.drawBitmap(x+6*letter,y,cursive_font[10],6,6,c);
        break;
      case 'l':
        display.drawBitmap(x+6*letter,y,cursive_font[11],6,6,c);
        break;
      case 'm':
        display.drawBitmap(x+6*letter,y,cursive_font[12],6,6,c);
        break;
      case 'n':
        display.drawBitmap(x+6*letter,y,cursive_font[13],6,6,c);
        break;
      case 'o':
        display.drawBitmap(x+6*letter,y,cursive_font[14],6,6,c);
        break;
      case 'p':
        display.drawBitmap(x+6*letter,y,cursive_font[15],6,12,c);
        break;
      case 'q':
        display.drawBitmap(x+6*letter,y,cursive_font[16],6,6,c);
        break;
      case 'r':
        display.drawBitmap(x+6*letter,y,cursive_font[17],6,6,c);
        break;
      case 's':
        display.drawBitmap(x+6*letter,y,cursive_font[18],6,6,c);
        break;
      case 't':
        display.drawBitmap(x+6*letter,y,cursive_font[19],6,6,c);
        break;
      case 'u':
        display.drawBitmap(x+6*letter,y,cursive_font[20],6,6,c);
        break;
      case 'v':
        display.drawBitmap(x+6*letter,y,cursive_font[21],6,6,c);
        break;
      case 'w':
        display.drawBitmap(x+6*letter,y,cursive_font[22],6,6,c);
        break;
      case 'x':
        display.drawBitmap(x+6*letter,y,cursive_font[23],6,6,c);
        break;
      case 'y':
        display.drawBitmap(x+6*letter,y,cursive_font[24],6,12,c);
        break;
      case 'z':
        display.drawBitmap(x+6*letter,y,cursive_font[25],6,6,c);
        break;
      //uppercase
      case 'A':
        display.drawBitmap(x+6*letter,y,cursive_font[0],6,6,c);
        break;
      case 'B':
        display.drawBitmap(x+6*letter,y,cursive_font[1],6,8,c);
        break;
      case 'C':
        display.drawBitmap(x+6*letter,y,cursive_font[2],6,6,c);
        break;
      case 'D':
        display.drawBitmap(x+6*letter,y,cursive_font[3],6,6,c);
        break;
      case 'E':
        display.drawBitmap(x+6*letter,y,cursive_font[4],6,6,c);
        break;
      case 'F':
        // display.drawBitmap(x+6*letter,y,cursive_font[5],6,6,c);
        display.drawBitmap(x+6*letter,y,cursive_font[5],6,12,c);
        break;
      case 'G':
        display.drawBitmap(x+6*letter,y,cursive_font[6],6,12,c);
        break;
      case 'H':
        display.drawBitmap(x+6*letter,y,cursive_font[7],6,6,c);
        break;
      case 'I':
        display.drawBitmap(x+6*letter,y,cursive_font[8],6,6,c);
        break;
      case 'J':
        display.drawBitmap(x+6*letter,y,cursive_font[9],6,12,c);
        break;
      case 'K':
        display.drawBitmap(x+6*letter,y,cursive_font[10],6,6,c);
        break;
      case 'L':
        display.drawBitmap(x+6*letter,y,cursive_font[11],6,6,c);
        break;
      case 'M':
        display.drawBitmap(x+6*letter,y,cursive_font[12],6,6,c);
        break;
      case 'N':
        display.drawBitmap(x+6*letter,y,cursive_font[13],6,6,c);
        break;
      case 'O':
        display.drawBitmap(x+6*letter,y,cursive_font[14],6,6,c);
        break;
      case 'P':
        display.drawBitmap(x+6*letter,y,cursive_font[15],6,12,c);
        break;
      case 'Q':
        display.drawBitmap(x+6*letter,y,cursive_font[16],6,6,c);
        break;
      case 'R':
        display.drawBitmap(x+6*letter,y,cursive_font[17],6,6,c);
        break;
      case 'S':
        display.drawBitmap(x+6*letter,y,cursive_font[18],6,6,c);
        break;
      case 'T':
        display.drawBitmap(x+6*letter,y,cursive_font[19],6,6,c);
        break;
      case 'U':
        display.drawBitmap(x+6*letter,y,cursive_font[20],6,6,c);
        break;
      case 'V':
        display.drawBitmap(x+6*letter,y,cursive_font[21],6,6,c);
        break;
      case 'W':
        display.drawBitmap(x+6*letter,y,cursive_font[22],6,6,c);
        break;
      case 'X':
        display.drawBitmap(x+6*letter,y,cursive_font[23],6,6,c);
        break;
      case 'Y':
        display.drawBitmap(x+6*letter,y,cursive_font[24],6,12,c);
        break;
      case 'Z':
        display.drawBitmap(x+6*letter,y,cursive_font[25],6,6,c);
        break;
      //numbers
      case '0':
        display.drawBitmap(x+6*letter,y,cursive_font[26],6,6,c);
        break;
      case '1':
        display.drawBitmap(x+6*letter,y,cursive_font[27],6,6,c);
        break;
      case '2':
        display.drawBitmap(x+6*letter,y,cursive_font[28],6,6,c);
        break;
      case '3':
        display.drawBitmap(x+6*letter,y,cursive_font[29],6,6,c);
        break;
      case '4':
        display.drawBitmap(x+6*letter,y,cursive_font[30],6,6,c);
        break;
      case '5':
        display.drawBitmap(x+6*letter,y,cursive_font[31],6,6,c);
        break;
      case '6':
        display.drawBitmap(x+6*letter,y,cursive_font[32],6,6,c);
        break;
      case '7':
        display.drawBitmap(x+6*letter,y,cursive_font[33],6,6,c);
        break;
      case '8':
        display.drawBitmap(x+6*letter,y,cursive_font[34],6,6,c);
        break;
      case '9':
        display.drawBitmap(x+6*letter,y,cursive_font[35],6,6,c);
        break;
      case '.':
        display.drawBitmap(x+6*letter,y,cursive_font[36],6,6,c);
        x-=3;
        break;
      case '-':
        display.drawBitmap(x+6*letter,y,cursive_font[37],6,6,c);
        break;
      case '+':
        display.drawBitmap(x+6*letter,y,cursive_font[38],6,6,c);
        break;
    }
  }
}

void printCursive_centered(int x, int y, String t, uint16_t c){
  printCursive(x-t.length()*3,y,t,c);
}

